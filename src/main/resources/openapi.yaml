openapi: 3.0.3
info:
  title: Blog API Documentation
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: csrf-protection
    description: CSRF攻撃からアプリケーションを保護するためのAPI
  - name: users
    description: ユーザー情報のAPI
  - name: login-logout
    description: ログイン・ログアウトのAPI
  - name: articles
    description: 記事情報のAPI
paths:
  # GET /csrf-cookie
  /csrf-cookie:
    get:
      tags: [ csrf-protection ]
      operationId: getCsrfCookie
      summary: CSRF Cookieの取得
      description: |
        リクエストに成功すると、204 No Content のレスポンスが返ります。
        このレスポンスのSet-Cookie ヘッダーにXSRF-TOKEN が含まれています。
        POST リクエストを実行するときは、受け取ったXSRF-TOKEN の値をX-XSRF-TOKEN ヘッダーに設定する必要があります。
        XSRF-TOKEN の値はPOST リクエストの度に取得し直す必要はなく、同じ値を何度も使うことができます。
      responses:
        '204':
          description: No Content
          headers:
            Set-Cookie:
              description: CSRF対策に利用するXSRF-TOKENというCookieが含まれています。
              schema:
                type: string
                example: XSRF-TOKEN=4ee8188f-2873-46cb-937f-7464ebf143e7; Path=/
          content: {}
        '500':
          $ref: "#/components/responses/InternalServerErrorResponse"
  /login:
    post:
      tags: [ login-logout ]
      operationId: login
      summary: ログイン
      description: ユーザー名とパスワードでログインします
      security:
        - csrfProtectionHeader: [ ]
        - csrfProtectionCookie: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: username123
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: OK
          content:
            application/json: { }
        '401':
          description: Unauthorized
          content:
            application/json: { }
        '500':
            $ref: "#/components/responses/InternalServerErrorResponse"
  /logout:
    post:
      tags: [ login-logout ]
      operationId: logout
      summary: ログアウト
      description: ログアウトします
      security:
        - csrfProtectionHeader: [ ]
        - csrfProtectionCookie: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json: { }
        '500':
          $ref: "#/components/responses/InternalServerErrorResponse"
  /users:
    post:
      description: ユーザーを登録します
      tags: [users]
      operationId: createUser
      security:
        - csrfProtectionCookie: []
        - csrfProtectionHeader: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForm"
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: 作成されたユーザーのURI
              schema:
                type: string
                example: /users/123
          content:
           application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        '400':
          $ref: "#/components/responses/BadRequestResponse"
        '500':
          $ref: "#/components/responses/InternalServerErrorResponse"
  /articles:
    post:
      tags: [ articles ]
      summary: 記事を作成します
      description: bodyとtitleを指定して記事を作成します。ログインは必要です。
      operationId: createArticle
      security:
        - cookieAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json: {}
        '401':
          $ref: "#/components/responses/UnauthorizedResponse"
        '403':
          $ref: "#/components/responses/ForbiddenResponse"
components:
  schemas:
    InternalServerError:
      type: object
      properties:
        type:
          type: string
          format: uri
          default: "about:blank"
        title:
          type: string
          default: "Internal Server Error"
        status:
          type: integer
          format: int32
          default: 500
        detail:
          type: string
          default: null
        instance:
          type: string
          format: uri
          default: null
    ErrorDetail:
      description: BadRequest エラーが発生したときのエラーの詳細
      type: object
      properties:
        pointer:
          description: エラーが発生したリクエストパラメーターのJSON ポインター
          type: string
          example: "#/username"
        detail:
          description: エラーの詳細
          type: string
          example: "ユーザー名は3文字以上32文字以内で入力してください"
    BadRequest:
      description: >
        リクエストの内容が不正な場合のエラーレスポンス。
        クライアントはエラーの内容を確認してリクエストを修正する必要があります。
        [RFC 9457 ](https://www.rfc-editor.org/rfc/rfc9457.html) に準拠しています。
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
          default: 400
          example: 400
        detail:
          type: string
        instance:
          type: string
          format: uri
          example: "/users"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
    Unauthorized:
      description: リクエストを実行するための資格情報が不足しています。
      type: object
      properties:
        title:
          type: string
          default: "Unauthorized"
        status:
          type: integer
          format: int32
          default: 401
        detail:
          type: string
          example: リクエストを実行するにはログインが必要です
        instance:
          type: string
          format: uri
          example: /articles
    Forbidden:
      description: 権限がありません
      type: object
      properties:
        title:
          type: string
          default: "Forbidden"
        status:
          type: integer
          format: int32
          default: 403
        detail:
          type: string
        instance:
          type: string
          format: uri
          example: /articles
    UserForm:
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: >
            ユーザー名。
            使用できる文字は半角英小文字と数字、およびハイフン、アンダースコア、ドットです。
            長さは3文字以上32文字以内です。
            ハイフン・アンダースコア・ドットはユーザー名の先頭と末尾に使用できません。
          type: string
          minLength: 3
          maxLength: 32
          pattern: '^[a-z0-9][a-z0-9_.-]{1,30}[a-z0-9]$'
          example: username123
        password:
          description: パスワード。10文字以上255文字以内。
          type: string
          format: password
          minLength: 10
          maxLength: 255
          example: password123
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        username:
          type: string
          example: "username123"
  responses:
    InternalServerErrorResponse:
       description: Internal Server Error
       content:
         application/problem+json:
            schema:
              $ref: "#/components/schemas/InternalServerError"
    BadRequestResponse:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/BadRequest"
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    ForbiddenResponse:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Forbidden"
  securitySchemes:
    csrfProtectionHeader:
      description: >
        CSRF 対策に利用するヘッダー。
        Cookie のXSRF-TOKEN の値を設定する必要があります。
      type: apiKey
      in: header
      name: X-XSRF-TOKEN
    csrfProtectionCookie:
        description: >
          CSRF 対策に利用するCookie。
          XSRF-TOKEN クッキーは`GET csrf-cookie` で取得できます。
        type: apiKey
        in: cookie
        name: XSRF-TOKEN
    cookieAuth:
      description: ログインセッションIDを保持する Cookie
      type: apiKey
      in: cookie
      name: SESSION